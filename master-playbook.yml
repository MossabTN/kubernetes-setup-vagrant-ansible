---
- hosts: all
  become: true
  tasks:
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

#    - name: Add an apt signing key for Docker
#      apt_key:
#        url: https://download.docker.com/linux/ubuntu/gpg
#        state: present
#
#    - name: Add apt repository for stable version
#      apt_repository:
#        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
#        state: present
#
#    - name: Install docker and its dependecies
#      apt:
#        name: "{{ packages }}"
#        state: present
#        update_cache: yes
#      vars:
#        packages:
#          - docker-ce
#          - docker-ce-cli
#          - containerd.io
#      notify:
#        - docker status
#
#    - name: Add vagrant user to docker group
#      user:
#        name: vagrant
#        group: docker
#    - name: Remove swapfile from /etc/fstab
#      mount:
#        name: "{{ item }}"
#        fstype: swap
#        state: absent
#      with_items:
#        - swap
#        - none
#
#    - name: Disable swap
#      command: swapoff -a
#      when: ansible_swaptotal_mb > 0


    - name: "modprobe overlay"
      modprobe:
        name: overlay
        state: present

    - name: "modprobe br_netfilter"
      modprobe:
        name: br_netfilter
        state: present

    - name: "sysctl"
      shell: "sysctl --system"

    - name: Put kubernetes-cri template
      template:
        src: "{{ item }}"
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        mode: 777
      with_fileglob:
        - ./cri-o/99-kubernetes-cri.conf.j2

    - name: Creates directory
      file:
        path: /etc/cni/net.d
        state: directory

    - name: Put 10-crio.conf template
      template:
        src: "{{ item }}"
        dest: /etc/cni/net.d/10-crio.conf
        mode: 777
      with_fileglob:
        - ./cri-o/10-crio.conf.j2

    - name: Get Cri-o apt-key
      apt_key:
        url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/Release.key
        state: present

    - name: Get Cri-o apt-key
      apt_key:
        url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.23/xUbuntu_18.04/Release.key
        state: present

    - name: Add Cri-o stable repo
      apt_repository:
        repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_18.04/ /
        state: present
        filename: cri-o-stable

    - name: Add Cri-o stable repo
      apt_repository:
        repo: deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.23/xUbuntu_18.04/ /
        state: present
        filename: cri-o-1.23

    - name: update apt
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: install required packages
      apt:
        name: "{{ packages }}"
        update_cache: true
        state: present
      vars:
        packages:
          - cri-o
          - cri-tools
          - cri-o-runc
          - runc

    - name: "Put storage template"
      template:
        src: "{{ item }}"
        dest: /etc/containers/storage.conf
        mode: 0777
      with_fileglob:
        - ./cri-o/storage.conf.j2

    - name: Reload configs
      systemd: daemon_reload=yes

    - name: Enable Cri-o Service
      systemd:
        name: crio
        enabled: yes

    - name: Restart Cri-o
      systemd:
        state: restarted
        daemon_reload: yes
        name: crio

    - name: Make sure a crio is running
      systemd:
        state: started
        name: crio

    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl
          - bash-completion

    - name: Bash Completion dependencies
        become: false
        command: "{{ item }}"
        with_items:
          - source <(kubectl completion bash)
          - echo "source <(kubectl completion bash)" >> ~/.bashrc

    - name: Install Helm
      command: "{{ item }}"
      with_items:
        - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        - chmod 700 get_helm.sh
        - ./get_helm.sh


    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}--cgroup-driver=systemd --container-runtime=remote --container-runtime-endpoint="unix:///var/run/crio/crio.sock"
        create: yes

    - name: Configure ip_forward
      shell: echo '1' > /proc/sys/net/ipv4/ip_forward

    - name: Restart kubelet
      service:
        name: kubelet
        daemon_reload: yes
        state: restarted

    - name: Add IP address of /etc/hosts
      lineinfile:
        dest: /etc/hosts
        line: {{ node_ip }} maxilog.tech
        state: present

    - name: Initialize the Kubernetes cluster using kubeadm
      command: kubeadm init --apiserver-advertise-address="{{ node_ip }}" --apiserver-cert-extra-sans="{{ machine_ip }}"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16

    - name: Setup kubeconfig for vagrant user
      command: "{{ item }}"
      with_items:
        - mkdir -p /home/vagrant/.kube
        - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        - chown vagrant:vagrant /home/vagrant/.kube/config

    - name: Install calico pod network
      become: false
      command: "{{ item }}"
      with_items:
        - kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
        - kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml

    - name: Install Ingress
      become: false
      command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.43.0/deploy/static/provider/baremetal/deploy.yaml

    - name: Install cert-manager
      become: false
      command: "{{ item }}"
      with_items:
        - kubectl create ns cert-manager
        - helm repo add jetstack https://charts.jetstack.io
        - helm repo update
        - helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.1.0 --set installCRDs=true

    - name: Install cert-manager
      become: false
      command: "{{ item }}"
      with_items:
        - helm repo add nfs-subdir-external-provisioner https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
        - kubectl create ns nfs-external-provisioner
        - helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner --namespace nfs-external-provisioner --set nfs.server=192.168.50.8 --set nfs.path=/opt/nfs

    - name: Generate join command
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Copy join command to local file
      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service: name=docker state=started
